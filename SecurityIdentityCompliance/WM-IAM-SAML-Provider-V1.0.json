{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Create SAML provider",
  "Parameters": {
  },
  "Resources": {
    "SAMLProviderCustomResourceLambdaExecutionRoleAdmin": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Workmates-SSO-Admin",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*-SAMLProviderCustomResourceLambdaAdmin-*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:CreateSAMLProvider",
                    "iam:DeleteSAMLProvider"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:saml-provider/Workmates-SSO-Admin"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:ListSAMLProviders"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:s3:::wm-sso-saml-files/*"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "SAMLProviderCustomResourceLambdaExecutionRoleL1": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Workmates-SSO-L1",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*-SAMLProviderCustomResourceLambdaL1-*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:CreateSAMLProvider",
                    "iam:DeleteSAMLProvider"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:saml-provider/Workmates-SSO-L1"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:ListSAMLProviders"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:s3:::wm-sso-saml-files/*"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "SAMLProviderCustomResourceLambdaExecutionRoleL2": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Workmates-SSO-L2",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*-SAMLProviderCustomResourceLambdaL2-*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:CreateSAMLProvider",
                    "iam:DeleteSAMLProvider"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:saml-provider/Workmates-SSO-L2"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:ListSAMLProviders"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:s3:::wm-sso-saml-files/*"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "CustomResourceAdmin": {
      "Type": "Custom::CustomResource",
      "DependsOn": [
        "SAMLProviderCustomResourceLambdaAdmin",
        "SAMLProviderCustomResourceLambdaExecutionRoleAdmin"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SAMLProviderCustomResourceLambdaAdmin",
            "Arn"
          ]
        }
      }
    },
    "SAMLProviderCustomResourceLambdaAdmin": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Admin-Lambda-SSO-V1",
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "SAMLProviderCustomResourceLambdaExecutionRoleAdmin",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 300,
        "Environment": {
          "Variables": {
            "FEDERATION_NAME": "Workmates-SSO-Admin",
            "FEDERATION_BUCKET": "wm-sso-saml-files",
            "FEDERATION_FILE": "Admin-SSO.xml",
            "PRIFIX": {
              "Fn::Sub": "${AWS::AccountId}"
            }
          }
        },
        "Code": {
          "ZipFile": "import boto3, json, os, urllib.request, ssl, time, traceback\n\n\nBUCKET = os.getenv('FEDERATION_BUCKET')\nFILE = os.getenv('FEDERATION_FILE')\nNAME = os.getenv('FEDERATION_NAME')\nprefix = os.getenv('PRIFIX')\nSAMLAcct = f\"{prefix}/{FILE}\"\n\n\nclass SAMLProvider(object):\n    def __init__(self):\n        self.iam_client = boto3.client('iam')\n        self.existing_providers = []\n        self._list_saml_providers()\n        self.s3 = boto3.resource('s3')\n\n    def get_federation_metadata(self):\n        try:\n            self.s3.Bucket(BUCKET).download_file(SAMLAcct, '/tmp/' + FILE)\n            handle = open('/tmp/' + FILE)\n            data = handle.read()\n            handle.close()\n            os.remove('/tmp/' + FILE)\n            return data\n        except:\n            traceback.print_exc()\n            raise\n\n    def _list_saml_providers(self):\n        providers = []\n        response = self.iam_client.list_saml_providers()\n        for provider in response['SAMLProviderList']:\n            self.existing_providers.append(provider['Arn'])\n\n    def add_saml_provider(self, name):\n        for arn in self.existing_providers:\n            if arn.split('/')[1] == name:\n                print(name + ' already exists as a provider')\n                return False\n        response = self.iam_client.create_saml_provider(SAMLMetadataDocument=self.get_federation_metadata(), Name=name)\n        print('Create response: ' + str(response))\n        return True\n\n    def delete_saml_provider(self, name):\n        for arn in self.existing_providers:\n            if arn.split('/')[1] == name:\n                response = self.iam_client.delete_saml_provider(SAMLProviderArn=arn)\n                print('Delete response: ' + str(response))\n\ndef send_response(event, context, response_status, response_data):\n    response_body = json.dumps({\n        'Status': response_status,\n        'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,\n        'PhysicalResourceId': context.log_stream_name,\n        'StackId': event['StackId'],\n        'RequestId': event['RequestId'],\n        'LogicalResourceId': event['LogicalResourceId'],\n        'Data': response_data\n    })\n    print('ResponseURL: %s', event['ResponseURL'])\n    print('ResponseBody: %s', response_body)\n    try:\n        opener = urllib.request.build_opener(urllib.request.HTTPHandler)\n        request = urllib.request.Request(event['ResponseURL'], data=response_body.encode())\n        request.add_header('Content-Type', '')\n        request.add_header('Content-Length', len(response_body))\n        request.get_method = lambda: 'PUT'\n        response = opener.open(request)\n        print(\"Status code: %s\", response.getcode())\n        print(\"Status message: %s\", response.msg)\n    except:\n        traceback.print_exc()\n\n\ndef lambda_handler(event, context):\n    print(event)\n    print(context)\n    saml = SAMLProvider()\n    try:\n        if event['RequestType'] == 'Create':\n            saml.add_saml_provider(NAME)\n            send_response(event, context, 'SUCCESS', {\"Message\": \"Resource creation successful!\"})\n        if event['RequestType'] == 'Update':\n            saml.delete_saml_provider(NAME)\n            time.sleep(10)\n            saml.add_saml_provider(NAME)\n            send_response(event, context, 'SUCCESS', {\"Message\": \"Resource update successful!\"})\n        if event['RequestType'] == 'Delete':\n            saml.delete_saml_provider(NAME)\n            send_response(event, context, 'SUCCESS', {\"Message\": \"Resource deletion successful!\"})\n    except:\n        send_response(event, context, \"FAILED\", {\"Message\": \"Exception during processing\"})\n        traceback.print_exc()\n"
        }
      }
    },
    "CustomResourceL1": {
      "Type": "Custom::CustomResource",
      "DependsOn": [
        "SAMLProviderCustomResourceLambdaL1",
        "SAMLProviderCustomResourceLambdaExecutionRoleL1"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SAMLProviderCustomResourceLambdaL1",
            "Arn"
          ]
        }
      }
    },
    "SAMLProviderCustomResourceLambdaL1": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "L1-Lambda-SSO-V1",
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "SAMLProviderCustomResourceLambdaExecutionRoleL1",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 300,
        "Environment": {
          "Variables": {
            "FEDERATION_NAME": "Workmates-SSO-L1",
            "FEDERATION_BUCKET": "wm-sso-saml-files",
            "FEDERATION_FILE": "L1-SSO.xml",
            "PRIFIX": {
              "Fn::Sub": "${AWS::AccountId}"
            }
          }
        },
        "Code": {
          "ZipFile": "import boto3, json, os, urllib.request, ssl, time, traceback\n\n\nBUCKET = os.getenv('FEDERATION_BUCKET')\nFILE = os.getenv('FEDERATION_FILE')\nNAME = os.getenv('FEDERATION_NAME')\nprefix = os.getenv('PRIFIX')\nSAMLAcct = f\"{prefix}/{FILE}\"\n\n\nclass SAMLProvider(object):\n    def __init__(self):\n        self.iam_client = boto3.client('iam')\n        self.existing_providers = []\n        self._list_saml_providers()\n        self.s3 = boto3.resource('s3')\n\n    def get_federation_metadata(self):\n        try:\n            self.s3.Bucket(BUCKET).download_file(SAMLAcct, '/tmp/' + FILE)\n            handle = open('/tmp/' + FILE)\n            data = handle.read()\n            handle.close()\n            os.remove('/tmp/' + FILE)\n            return data\n        except:\n            traceback.print_exc()\n            raise\n\n    def _list_saml_providers(self):\n        providers = []\n        response = self.iam_client.list_saml_providers()\n        for provider in response['SAMLProviderList']:\n            self.existing_providers.append(provider['Arn'])\n\n    def add_saml_provider(self, name):\n        for arn in self.existing_providers:\n            if arn.split('/')[1] == name:\n                print(name + ' already exists as a provider')\n                return False\n        response = self.iam_client.create_saml_provider(SAMLMetadataDocument=self.get_federation_metadata(), Name=name)\n        print('Create response: ' + str(response))\n        return True\n\n    def delete_saml_provider(self, name):\n        for arn in self.existing_providers:\n            if arn.split('/')[1] == name:\n                response = self.iam_client.delete_saml_provider(SAMLProviderArn=arn)\n                print('Delete response: ' + str(response))\n\ndef send_response(event, context, response_status, response_data):\n    response_body = json.dumps({\n        'Status': response_status,\n        'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,\n        'PhysicalResourceId': context.log_stream_name,\n        'StackId': event['StackId'],\n        'RequestId': event['RequestId'],\n        'LogicalResourceId': event['LogicalResourceId'],\n        'Data': response_data\n    })\n    print('ResponseURL: %s', event['ResponseURL'])\n    print('ResponseBody: %s', response_body)\n    try:\n        opener = urllib.request.build_opener(urllib.request.HTTPHandler)\n        request = urllib.request.Request(event['ResponseURL'], data=response_body.encode())\n        request.add_header('Content-Type', '')\n        request.add_header('Content-Length', len(response_body))\n        request.get_method = lambda: 'PUT'\n        response = opener.open(request)\n        print(\"Status code: %s\", response.getcode())\n        print(\"Status message: %s\", response.msg)\n    except:\n        traceback.print_exc()\n\n\ndef lambda_handler(event, context):\n    print(event)\n    print(context)\n    saml = SAMLProvider()\n    try:\n        if event['RequestType'] == 'Create':\n            saml.add_saml_provider(NAME)\n            send_response(event, context, 'SUCCESS', {\"Message\": \"Resource creation successful!\"})\n        if event['RequestType'] == 'Update':\n            saml.delete_saml_provider(NAME)\n            time.sleep(10)\n            saml.add_saml_provider(NAME)\n            send_response(event, context, 'SUCCESS', {\"Message\": \"Resource update successful!\"})\n        if event['RequestType'] == 'Delete':\n            saml.delete_saml_provider(NAME)\n            send_response(event, context, 'SUCCESS', {\"Message\": \"Resource deletion successful!\"})\n    except:\n        send_response(event, context, \"FAILED\", {\"Message\": \"Exception during processing\"})\n        traceback.print_exc()\n"
        }
      }
    },
    "CustomResourceL2": {
      "Type": "Custom::CustomResource",
      "DependsOn": [
        "SAMLProviderCustomResourceLambdaL2",
        "SAMLProviderCustomResourceLambdaExecutionRoleL2"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SAMLProviderCustomResourceLambdaL2",
            "Arn"
          ]
        }
      }
    },
    "SAMLProviderCustomResourceLambdaL2": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "L2-Lambda-SSO-V1",
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "SAMLProviderCustomResourceLambdaExecutionRoleL2",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 300,
        "Environment": {
          "Variables": {
            "FEDERATION_NAME": "Workmates-SSO-L2",
            "FEDERATION_BUCKET": "wm-sso-saml-files",
            "FEDERATION_FILE": "L2-SSO.xml",
            "PRIFIX": {
              "Fn::Sub": "${AWS::AccountId}"
            }
          }
        },
        "Code": {
          "ZipFile": "import boto3, json, os, urllib.request, ssl, time, traceback\n\n\nBUCKET = os.getenv('FEDERATION_BUCKET')\nFILE = os.getenv('FEDERATION_FILE')\nNAME = os.getenv('FEDERATION_NAME')\nprefix = os.getenv('PRIFIX')\nSAMLAcct = f\"{prefix}/{FILE}\"\n\n\nclass SAMLProvider(object):\n    def __init__(self):\n        self.iam_client = boto3.client('iam')\n        self.existing_providers = []\n        self._list_saml_providers()\n        self.s3 = boto3.resource('s3')\n\n    def get_federation_metadata(self):\n        try:\n            self.s3.Bucket(BUCKET).download_file(SAMLAcct, '/tmp/' + FILE)\n            handle = open('/tmp/' + FILE)\n            data = handle.read()\n            handle.close()\n            os.remove('/tmp/' + FILE)\n            return data\n        except:\n            traceback.print_exc()\n            raise\n\n    def _list_saml_providers(self):\n        providers = []\n        response = self.iam_client.list_saml_providers()\n        for provider in response['SAMLProviderList']:\n            self.existing_providers.append(provider['Arn'])\n\n    def add_saml_provider(self, name):\n        for arn in self.existing_providers:\n            if arn.split('/')[1] == name:\n                print(name + ' already exists as a provider')\n                return False\n        response = self.iam_client.create_saml_provider(SAMLMetadataDocument=self.get_federation_metadata(), Name=name)\n        print('Create response: ' + str(response))\n        return True\n\n    def delete_saml_provider(self, name):\n        for arn in self.existing_providers:\n            if arn.split('/')[1] == name:\n                response = self.iam_client.delete_saml_provider(SAMLProviderArn=arn)\n                print('Delete response: ' + str(response))\n\ndef send_response(event, context, response_status, response_data):\n    response_body = json.dumps({\n        'Status': response_status,\n        'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,\n        'PhysicalResourceId': context.log_stream_name,\n        'StackId': event['StackId'],\n        'RequestId': event['RequestId'],\n        'LogicalResourceId': event['LogicalResourceId'],\n        'Data': response_data\n    })\n    print('ResponseURL: %s', event['ResponseURL'])\n    print('ResponseBody: %s', response_body)\n    try:\n        opener = urllib.request.build_opener(urllib.request.HTTPHandler)\n        request = urllib.request.Request(event['ResponseURL'], data=response_body.encode())\n        request.add_header('Content-Type', '')\n        request.add_header('Content-Length', len(response_body))\n        request.get_method = lambda: 'PUT'\n        response = opener.open(request)\n        print(\"Status code: %s\", response.getcode())\n        print(\"Status message: %s\", response.msg)\n    except:\n        traceback.print_exc()\n\n\ndef lambda_handler(event, context):\n    print(event)\n    print(context)\n    saml = SAMLProvider()\n    try:\n        if event['RequestType'] == 'Create':\n            saml.add_saml_provider(NAME)\n            send_response(event, context, 'SUCCESS', {\"Message\": \"Resource creation successful!\"})\n        if event['RequestType'] == 'Update':\n            saml.delete_saml_provider(NAME)\n            time.sleep(10)\n            saml.add_saml_provider(NAME)\n            send_response(event, context, 'SUCCESS', {\"Message\": \"Resource update successful!\"})\n        if event['RequestType'] == 'Delete':\n            saml.delete_saml_provider(NAME)\n            send_response(event, context, 'SUCCESS', {\"Message\": \"Resource deletion successful!\"})\n    except:\n        send_response(event, context, \"FAILED\", {\"Message\": \"Exception during processing\"})\n        traceback.print_exc()\n"
        }
      }
    },
    "WorkmatesCrossAccountAdminRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "Workmates-SSO",
              "AdminRole"
            ]
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AdministratorAccess"
        ],
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:saml-provider/Workmates-SSO-Admin"
                }
              },
              "Action": "sts:AssumeRoleWithSAML",
              "Condition": {
                "StringEquals": {
                  "SAML:aud": "https://signin.aws.amazon.com/saml"
                }
              }
            }
          ]
        }
      }
    },
    "WorkmatesCrossAccountL1SupportRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "Workmates-SSO",
              "L1SupportRole"
            ]
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/job-function/Billing",
          "arn:aws:iam::aws:policy/ReadOnlyAccess",
          "arn:aws:iam::aws:policy/CloudWatchFullAccess",
          "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
        ],
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:saml-provider/Workmates-SSO-L1"
                }
              },
              "Action": "sts:AssumeRoleWithSAML",
              "Condition": {
                "StringEquals": {
                  "SAML:aud": "https://signin.aws.amazon.com/saml"
                }
              }
            }
          ]
        }
      }
    },
    "WorkmatesCrossAccountL2SupportRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "Workmates-SSO",
              "L2SupportRole"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:saml-provider/Workmates-SSO-L2"
                }
              },
              "Action": "sts:AssumeRoleWithSAML",
              "Condition": {
                "StringEquals": {
                  "SAML:aud": "https://signin.aws.amazon.com/saml"
                }
              }
            }
          ]
        }
      }
    },
    "WmCrossAccountL2SupportPolicySSO": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "WML2SupportPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Allowall",
              "Effect": "Allow",
              "Action": "*",
              "Resource": "*"
            },
            {
              "Sid": "DenyDelete",
              "Effect": "Deny",
              "Action": [
                "apigateway:DELETE",
                "autoscaling:Delete*",
                "autoscaling:SuspendProcesses",
                "acm:RemoveTagsFromCertificate",
                "acm:DeleteCertificate",
                "cloudformation:Delete*",
                "cloudfront:Delete*",
                "cloudtrail:Delete*",
                "directconnect:Delete*",
                "ds:Delete*",
                "ds:Remove*",
                "dms:Delete*",
                "dynamodb:Delete*",
                "ec2:Delete*",
                "ec2:DeregisterImage",
                "ec2:Purchase*",
                "ec2:TerminateInstances",
                "ec2:ModifyReservedInstances",
                "elasticbeanstalk:Delete*",
                "elasticloadbalancing:DeleteLoadBalancer",
                "iam:Delete*",
                "lambda:Delete*",
                "rds:Delete*",
                "route53:Delete*",
                "s3:Delete*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "DenyDetachL2Policy",
              "Effect": "Deny",
              "Action": [
                "iam:DetachRolePolicy",
                "iam:DetachGroupPolicy",
                "iam:DetachUserPolicy"
              ],
              "Resource": "*",
              "Condition": {
                "ArnEquals": {
                  "iam:PolicyARN": "arn:aws:iam::*:policy/*L2*"
                }
              }
            },
            {
              "Sid": "DenyAttachFullPolicyToUserAndGroup",
              "Effect": "Deny",
              "Action": [
                "iam:AttachRolePolicy",
                "iam:AttachGroupPolicy",
                "iam:AttachUserPolicy"
              ],
              "Resource": "*",
              "Condition": {
                "ArnEquals": {
                  "iam:PolicyARN": "arn:aws:iam::*:policy/*Full*"
                }
              }
            },
            {
              "Sid": "DenyAttachAdminPolicyToUserAndGroup",
              "Effect": "Deny",
              "Action": [
                "iam:AttachRolePolicy",
                "iam:AttachGroupPolicy",
                "iam:AttachUserPolicy"
              ],
              "Resource": "*",
              "Condition": {
                "ArnEquals": {
                  "iam:PolicyARN": "arn:aws:iam::*:policy/*Admin*"
                }
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "WorkmatesCrossAccountL2SupportRole"
          }
        ]
      }
    },
    "WmCrossAccountL1SupportPolicySSO": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "WML1SupportPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "VisualEditor0",
              "Effect": "Allow",
              "Action": [
                "ec2:CopySnapshot",
                "rds:StartDBCluster",
                "lightsail:CreateRelationalDatabaseSnapshot",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:CreateImage",
                "ec2:CopyImage",
                "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
                "lightsail:GetInstanceAccessDetails",
                "workspaces:DescribeAccountModifications",
                "ec2:StartInstances",
                "ec2:RevokeSecurityGroupEgress",
                "lightsail:OpenInstancePublicPorts",
                "workspaces:CreateIpGroup",
                "workspaces:RebootWorkspaces",
                "workspaces:ModifyAccount",
                "workspaces:DescribeWorkspaces",
                "workspaces:UpdateRulesOfIpGroup",
                "sns:*",
                "events:*",
                "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
                "workspaces:RebuildWorkspaces",
                "rds:StopDBCluster",
                "workspaces:AssociateIpGroups",
                "workspaces:DescribeAccount",
                "workspaces:AuthorizeIpRules",
                "ec2:CreateTags",
                "ec2:ModifyNetworkInterfaceAttribute",
                "workspaces:CreateWorkspaces",
                "lightsail:ExportSnapshot",
                "lightsail:StopRelationalDatabase",
                "ec2:StopInstances",
                "rds:StartDBInstance",
                "ec2:RevokeSecurityGroupIngress",
                "lightsail:PutInstancePublicPorts",
                "workspaces:CreateTags",
                "rds:CreateDBSnapshot",
                "cloudwatch:*",
                "ec2:CreateSnapshots",
                "lightsail:StopInstance",
                "workspaces:DescribeIpGroups",
                "rds:ModifyDBSnapshotAttribute",
                "ec2:DeleteTags",
                "workspaces:DescribeWorkspaceImages",
                "workspaces:ListAvailableManagementCidrRanges",
                "lightsail:RebootRelationalDatabase",
                "ec2:ModifyImageAttribute",
                "lightsail:CreateInstanceSnapshot",
                "workspaces:StopWorkspaces",
                "lightsail:PeerVpc",
                "lightsail:StartInstance",
                "workspaces:DescribeWorkspacesConnectionStatus",
                "ec2:CreateSecurityGroup",
                "ec2:CreateSnapshot",
                "workspaces:StartWorkspaces",
                "ec2:ModifyInstanceAttribute",
                "workspaces:DescribeWorkspaceDirectories",
                "ec2:RebootInstances",
                "rds:AddTagsToResource",
                "ec2:AuthorizeSecurityGroupEgress",
                "workspaces:ModifyWorkspaceProperties",
                "rds:CopyDBSnapshot",
                "workspaces:ImportWorkspaceImage",
                "rds:CopyDBClusterSnapshot",
                "workspaces:DescribeWorkspaceBundles",
                "rds:StopDBInstance",
                "lightsail:CopySnapshot",
                "lightsail:StartRelationalDatabase",
                "workspaces:DescribeClientProperties",
                "rds:ModifyDBSnapshot",
                "rds:RebootDBInstance",
                "workspaces:DescribeTags",
                "workspaces:ModifyClientProperties",
                "lightsail:RebootInstance",
                "workspaces:ModifyWorkspaceState",
                "aws-portal:*Billing",
                "aws-portal:*Usage",
                "aws-portal:*PaymentMethods",
                "budgets:ViewBudget",
                "budgets:ModifyBudget",
                "ce:UpdatePreferences",
                "ce:CreateReport",
                "ce:UpdateReport",
                "ce:DeleteReport",
                "ce:CreateNotificationSubscription",
                "ce:UpdateNotificationSubscription",
                "ce:DeleteNotificationSubscription",
                "cur:DescribeReportDefinitions",
                "cur:PutReportDefinition",
                "cur:ModifyReportDefinition",
                "cur:DeleteReportDefinition",
                "purchase-orders:*PurchaseOrders"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "WorkmatesCrossAccountL1SupportRole"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ADMIN": {
      "Description": "Admin ARN",
      "Value": {
        "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:saml-provider/Workmates-SSO-Admin,arn:aws:iam::${AWS::AccountId}:role/Workmates-SSO-AdminRole"
      }
    },
    "L2": {
      "Description": "L2 ARN",
      "Value": {
        "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:saml-provider/Workmates-SSO-L2,arn:aws:iam::${AWS::AccountId}:role/Workmates-SSO-L2SupportRole"
      }
    },
    "L1": {
      "Description": "L1 ARN",
      "Value": {
        "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:saml-provider/Workmates-SSO-L1,arn:aws:iam::${AWS::AccountId}:role/Workmates-SSO-L1SupportRole"
      }
    }
  }
}
