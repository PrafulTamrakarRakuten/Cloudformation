{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "OpenVPN Stack",
  "Parameters": {
    "ClientName": {
      "Type": "String",
      "Description": "Please enter client name here"
    },
    "VPC": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud."
    },
    "Country": {
      "Type": "String",
      "MinLength": "2",
      "MaxLength": "2",
      "AllowedPattern": "[A-Z]+",
      "ConstraintDescription": "Must Be country initial example:IN all capital letters"
    },
    "Province": {
      "Type": "String",
      "AllowedPattern": "[A-Za-z]+",
      "ConstraintDescription": "No Spaces or special charecter allow in Province"
    },
    "City": {
      "Type": "String",
      "AllowedPattern": "[A-Za-z]+",
      "ConstraintDescription": "No Spaces or special charecter allow in City"
    },
    "Organization": {
      "Type": "String",
      "AllowedPattern": "[A-Za-z-]+",
      "ConstraintDescription": "only '-' allow between words in Organization "
    },
    "Email": {
      "Type": "String",
      "AllowedPattern": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$",
      "ConstraintDescription": "Must be enter valid email address"
    },
    "OrganizationUnit": {
      "Type": "String",
      "AllowedPattern": "[A-Z]+",
      "Description": "Must Be all cap letters in Organization"
    },
    "Subnets": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be a select existing subnets associated . They should be residing in the selected Virtual Private Cloud."
    },
    "SSHKeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "SSH Key for the OpenVPN Instance",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
    },
    "ClientIPCIDR": {
      "Type": "String",
      "Default": "0.0.0.0/0",
      "Description": "CIDR IP to be granted access by the SG, use 0.0.0.0/0 to accept all IPs"
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "AMAZONLINUXAMI": "ami-b70554c8"
      },
      "us-east-2": {
        "AMAZONLINUXAMI": "ami-8c122be9"
      },
      "us-west-1": {
        "AMAZONLINUXAMI": "ami-e0ba5c83"
      },
      "us-west-2": {
        "AMAZONLINUXAMI": "ami-a9d09ed1"
      },
      "ca-central-1": {
        "AMAZONLINUXAMI": "ami-0ee86a6a"
      },
      "eu-west-1": {
        "AMAZONLINUXAMI": "ami-466768ac"
      },
      "eu-central-1": {
        "AMAZONLINUXAMI": "ami-7c4f7097"
      },
      "eu-west-2": {
        "AMAZONLINUXAMI": "ami-b8b45ddf"
      },
      "ap-southeast-1": {
        "AMAZONLINUXAMI": "ami-05868579"
      },
      "ap-southeast-2": {
        "AMAZONLINUXAMI": "ami-39f8215b"
      },
      "ap-northeast-2": {
        "AMAZONLINUXAMI": "ami-afd86dc1"
      },
      "ap-northeast-1": {
        "AMAZONLINUXAMI": "ami-e99f4896"
      },
      "ap-south-1": {
        "AMAZONLINUXAMI": "ami-d783a9b8"
      },
      "sa-east-1": {
        "AMAZONLINUXAMI": "ami-6dca9001"
      }
    }
  },
  "Resources": {
    "myEIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "AssociateManagementAccessPort": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "myEIP",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "myNetworkInterface"
        }
      }
    },
    "OpenVPNInstanceSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SG for OpenVPN Server",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "udp",
            "FromPort": 1194,
            "ToPort": 1194,
            "CidrIp": {
              "Ref": "ClientIPCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": {
              "Ref": "ClientIPCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 2223,
            "ToPort": 2223,
            "CidrIp": {
              "Ref": "ClientIPCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "15.206.48.168/32",
            "Description": "WorkmatesCore2cloud-Prod-VPN-1a"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "10.3.1.105/32",
            "Description": "WorkmatesCore2cloud-Prod-VPN-1a"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "ClientName"
                  },
                  "OpenVPN-SG"
                ]
              ]
            }
          }
        ]
      }
    },
    "myEC2InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "myAccessPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "myAccessPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation"
              ],
              "Resource": {
                "Fn::Sub": "arn:aws:s3:::${myS3Bucket}"
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:PutObjectAcl",
                "s3:GetObject",
                "s3:GetObjectAcl",
                "s3:DeleteObject"
              ],
              "Resource": {
                "Fn::Sub": "arn:aws:s3:::${myS3Bucket}/*"
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "myEC2InstanceRole"
          }
        ]
      }
    },
    "ec2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "myEC2InstanceRole"
          }
        ]
      }
    },
    "myNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnets"
        },
        "Description": "Public Interface",
        "GroupSet": [
          {
            "Ref": "OpenVPNInstanceSG"
          }
        ],
        "SourceDestCheck": false,
        "Tags": [
          {
            "Key": "Name",
            "Value": "Public ENI"
          }
        ]
      }
    },
    "myS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private"
      }
    },
    "EC2OpenVPNInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": true,
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMAZONLINUXAMI"
          ]
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeType": "gp3",
              "DeleteOnTermination": "true",
              "VolumeSize": "10"
            }
          }
        ],
        "InstanceType": "t3.micro",
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": {
              "Ref": "myNetworkInterface"
            },
            "DeviceIndex": 0
          }
        ],
        "IamInstanceProfile": {
          "Ref": "ec2InstanceProfile"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "ClientName"
                  },
                  "Prod-OpenVPN"
                ]
              ]
            }
          },
          {
            "Key": "Managedby",
            "Value": "Workmates"
          },
          {
            "Key": "Project",
            "Value": {
              "Ref": "ClientName"
            }
          },
          {
            "Key": "Env",
            "Value": "Prod OpenVPN"
          },
          {
            "Key": "Layer",
            "Value": "APP"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Sub": "#!/bin/bash\nyum update -y aws-cfn-bootstrap\n/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2OpenVPNInstance --configsets myCfnConfigSet --region ${AWS::Region}\nyum -y update\n/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2OpenVPNInstance --region ${AWS::Region}\n"
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": "1",
          "Timeout": "PT10M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "myCfnConfigSet": [
              "configure_cfn",
              "install_epel_software",
              "install_software",
              "run",
              "generate_secrets",
              "generate_client",
              "configure_server",
              "upload_files",
              "clear_files"
            ]
          },
          "configure_cfn": {
            "files": {
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Sub": "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.EC2OpenVPNInstance.Metadata.AWS::CloudFormation::Init\naction=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2OpenVPNInstance --configsets myCfnConfigSet --region ${AWS::Region}\n"
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Sub": "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}\nverbose=true\ninterval=1\n"
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "install_epel_software": {
            "commands": {
              "01_install_epel": {
                "command": "sudo amazon-linux-extras install epel -y"
              }
            }
          },
          "install_software": {
            "packages": {
              "yum": {
                "openvpn": []
              }
            },
            "commands": {
              "01_install_software_install_easyrsa": {
                "command": "wget -qO- https://wm-cloudformation-templates.s3.ap-south-1.amazonaws.com/EasyRSA-2.2.2.tgz  | tar xvz -C /opt/"
              },
              "02_install_software_copy_easyrsa": {
                "command": "cp -R /opt/EasyRSA-2.2.2 /opt/easy-rsa"
              },
              "03_get_create_user_dash": {
                "command": "wget -P /tmp/ https://wm-cloudformation-templates.s3.ap-south-1.amazonaws.com/user.sh"
              },
              "04_get_revoke_user_dash": {
                "command": "wget -P /tmp/ https://wm-cloudformation-templates.s3.ap-south-1.amazonaws.com/revoke-2.sh"
              }
            },
            "files": {
              "/tmp/certificate.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "sed -i \"64s/US/",
                      {
                        "Ref": "Country"
                      },
                      "/g\" /opt/easy-rsa/vars\n",
                      "sed -i \"65s/CA/",
                      {
                        "Ref": "Province"
                      },
                      "/g\" /opt/easy-rsa/vars\n",
                      "sed -i \"66s/SanFrancisco/",
                      {
                        "Ref": "City"
                      },
                      "/g\" /opt/easy-rsa/vars\n",
                      "sed -i \"67s/Fort-Funston/",
                      {
                        "Ref": "Organization"
                      },
                      "/g\" /opt/easy-rsa/vars\n",
                      "sed -i \"68s/me@myhost.mydomain/",
                      {
                        "Ref": "Email"
                      },
                      "/g\" /opt/easy-rsa/vars\n",
                      "sed -i \"69s/MyOrganizationalUnit/",
                      {
                        "Ref": "OrganizationUnit"
                      },
                      "/g\" /opt/easy-rsa/vars\n"
                    ]
                  ]
                },
                "mode": "000777",
                "owner": "root",
                "group": "root"
              },
              "/tmp/upload.sh": {
                "content": {
                  "Fn::Sub": "sed -i 11s/openvenuserbucket/${myS3Bucket}/g  /tmp/user.sh\nsed -i 12s/createregion/${AWS::Region}/g  /tmp/user.sh\nsed -i 5s/openvenuserbucket/${myS3Bucket}/g  /tmp/revoke-2.sh\nsed -i 6s/createregion/${AWS::Region}/g  /tmp/revoke-2.sh\n"
                },
                "mode": "000777",
                "owner": "root",
                "group": "root"
              }
            }
          },
          "run": {
            "commands": {
              "01_runtmp": {
                "command": "sh certificate.sh",
                "cwd": "/tmp/"
              },
              "02_runupload": {
                "command": "sh upload.sh",
                "cwd": "/tmp/"
              },
              "03_runuserchmod": {
                "command": "chmod +x /tmp/user.sh"
              },
              "04_runcopy": {
                "command": "cp /tmp/user.sh /bin/vpnuser-create"
              },
              "05_runchmodcreate": {
                "command": "chmod +x /bin/vpnuser-create"
              },
              "06_runchmodrevoke": {
                "command": "cp /tmp/revoke-2.sh /bin/vpnuser-revoke"
              },
              "07_runchmod": {
                "command": "chmod +x /bin/vpnuser-revoke"
              },
              "08_install_ufw": {
                "command": "sudo yum install --enablerepo=\"epel\" ufw -y"
              },
              "09_enable_ufw": {
                "command": "echo \"y\" | sudo ufw enable"
              },
              "10_allow_ufw": {
                "command": "ufw allow ssh"
              },
              "11_allow_custom_ssh": {
                "command": "ufw allow 2223/tcp"
              },
              "12_install_ufw": {
                "command": "ufw allow 1194/udp"
              },
              "13_change_value_accept": {
                "command": "sed -i '19s/DROP/ACCEPT/' /etc/default/ufw"
              },
              "15_ufw_route": {
                "command": "sed -i '8s/$/\\n\\0# START OPENVPN RULES/' /etc/ufw/before.rules"
              },
              "16_ufw_route_rules": {
                "command": "sed -i '9s/$/\\n\\0# NAT (Network Address Translation) table rules/' /etc/ufw/before.rules"
              },
              "17_ufw_route_rules": {
                "command": "sed -i '10s/$/\\n\\0*nat/' /etc/ufw/before.rules"
              },
              "18_ufw_route_rules": {
                "command": "sed -i '11s/$/\\n\\0:POSTROUTING ACCEPT [0:0]/' /etc/ufw/before.rules"
              },
              "19_ufw_route_rules": {
                "command": "sed -i '12s/$/\\n\\0# Allow traffic from OpenVPN client to eth0 /' /etc/ufw/before.rules"
              },
              "20_ufw_route_rules": {
                "command": "sed -i '13s/$/\\n\\0\\-A POSTROUTING -s 172.16.0.0\\/22 -o eth0 -j MASQUERADE/' /etc/ufw/before.rules"
              },
              "21_ufw_route_rules": {
                "command": "sed -i '14s/$/\\n\\0# do not delete the \"COMMIT\" line or the NAT table rules above will not be processed/' /etc/ufw/before.rules"
              },
              "22_ufw_route_rules": {
                "command": "sed -i '15s/$/\\n\\0COMMIT/' /etc/ufw/before.rules"
              },
              "23_ufw_route_rules": {
                "command": "sed -i '16s/$/\\n\\0# END OPENVPN RULES/' /etc/ufw/before.rules"
              },
              "24_ufw_route_reload": {
                "command": "sudo ufw reload"
              }
            }
          },
          "generate_secrets": {
            "commands": {
              "01_generate_secrets_clean_keysdir": {
                "cwd": "/opt/easy-rsa",
                "test": "test -e /opt/easy-rsa/clean-all",
                "command": "source /opt/easy-rsa/vars;/opt/easy-rsa/clean-all"
              },
              "02_generate_secrets_update_build-ca": {
                "cwd": "/opt/easy-rsa",
                "test": "test -e /opt/easy-rsa/build-ca",
                "command": {
                  "Fn::Sub": "sed -i 's/--interact//g' /opt/easy-rsa/build-ca\n"
                }
              },
              "03_generate_secrets_run_build-ca": {
                "cwd": "/opt/easy-rsa",
                "test": "test -e /opt/easy-rsa/build-ca",
                "command": "source /opt/easy-rsa/vars;/opt/easy-rsa/build-ca"
              },
              "04_generate_secrets_run_build-dh": {
                "cwd": "/opt/easy-rsa",
                "test": "test -e /opt/easy-rsa/build-dh",
                "command": "source /opt/easy-rsa/vars;/opt/easy-rsa/build-dh"
              },
              "05_generate_secrets_update_build-key-server": {
                "cwd": "/opt/easy-rsa",
                "test": "test -e /opt/easy-rsa/build-key-server",
                "command": {
                  "Fn::Sub": "sed -i 's/--interact//g' /opt/easy-rsa/build-key-server\n"
                }
              },
              "06_generate_secrets_run_build-key-server": {
                "cwd": "/opt/easy-rsa",
                "test": "test -e /opt/easy-rsa/build-key-server",
                "command": "source /opt/easy-rsa/vars;/opt/easy-rsa/build-key-server server"
              },
              "07_generate_secrets_statictlssecret": {
                "cwd": "/opt/easy-rsa/keys",
                "command": "openvpn --genkey --secret statictlssecret.key"
              }
            }
          },
          "generate_client": {
            "files": {
              "/opt/easy-rsa/openvpn_client.conf": {
                "content": {
                  "Fn::Sub": "client\ndev tun\nproto udp\nremote ${myEIP} 1194\nca ca.crt\ncert clientuser.crt\nkey clientuser.key\ntls-client\ntls-auth statictlssecret.key 1\ntls-version-min 1.2\ntls-cipher TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256:TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256:TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384:TLS-DHE-RSA-WITH-AES-256-CBC-SHA256\ncipher AES-256-CBC\nauth SHA512\nresolv-retry infinite\nauth-retry none\nnobind\npersist-key\npersist-tun\nns-cert-type server\ncomp-lzo\nverb 3\n"
                },
                "mode": "000700",
                "owner": "root",
                "group": "root"
              },
              "/opt/easy-rsa/gen_ovpn_profile.sh": {
                "content": {
                  "Fn::Sub": "(cat /opt/easy-rsa/openvpn_client.conf\necho '<key>'\ncat keys/clientuser.key\necho '</key>'\necho '<cert>'\ncat keys/clientuser.crt\necho '</cert>'\necho '<ca>'\ncat keys/ca.crt\necho '</ca>'\n) > /opt/easy-rsa/keys/openvpn_clientuser.ovpn\n"
                },
                "mode": "000700",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "01_generate_client_update_build-key": {
                "cwd": "/opt/easy-rsa",
                "test": "test -e /opt/easy-rsa/build-key",
                "command": {
                  "Fn::Sub": "sed -i 's/--interact//g' /opt/easy-rsa/build-key\n"
                }
              },
              "02_generate_client_run_build-key": {
                "cwd": "/opt/easy-rsa",
                "test": "test -e /opt/easy-rsa/build-key",
                "command": "source /opt/easy-rsa/vars;/opt/easy-rsa/build-key clientuser"
              },
              "03_generate_client_generate_ovpn_profile": {
                "cwd": "/opt/easy-rsa",
                "test": "test -e /opt/easy-rsa/gen_ovpn_profile.sh",
                "command": "/opt/easy-rsa/gen_ovpn_profile.sh"
              }
            }
          },
          "configure_server": {
            "files": {
              "/opt/openvpn/server.conf": {
                "content": {
                  "Fn::Sub": "port 1194\nproto udp\ndev tun\nserver 172.16.0.0 255.255.252.0\npush \"redirect-gateway def1\"\nca /opt/easy-rsa/keys/ca.crt\ncert /opt/easy-rsa/keys/server.crt\nkey /opt/easy-rsa/keys/server.key\ndh /opt/easy-rsa/keys/dh2048.pem\ntls-server\ntls-auth /opt/easy-rsa/keys/statictlssecret.key 0\ntls-version-min 1.2\ntls-cipher TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256:TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256:TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384:TLS-DHE-RSA-WITH-AES-256-CBC-SHA256\ncipher AES-256-CBC\nauth SHA512\nifconfig-pool-persist ipp.txt\nkeepalive 10 120\nping-timer-rem\ncomp-lzo\npersist-key\npersist-tun\nstatus openvpn-status.log\nlog-append /var/log/openvpn.log\nverb 3\nmax-clients 100\nuser nobody\ngroup nobody\n"
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "01_configure_server_sysctl_ipforward": {
                "command": "echo \"net.ipv4.ip_forward = 1\" >> /etc/sysctl.conf"
              },
              "02_configure_server_sysctl_reload": {
                "command": "sysctl -p"
              },
              "03_configure_server_iptables_nat": {
                "command": "iptables -t nat -A POSTROUTING -s 172.16.0.0/22 -o eth0 -j MASQUERADE"
              },
              "04_configure_server_update_config": {
                "command": "cp -rf /opt/openvpn/server.conf /etc/openvpn/server.conf"
              },
              "05_network_restart": {
                "command": "sudo systemctl restart network.service"
              },
              "06_enable_openvpn_service": {
                "command": "systemctl -f enable openvpn@server.service"
              },
              "07_start_openvpn": {
                "command": "systemctl start openvpn@server.service"
              },
              "08_chkconfig_on_ufw": {
                "command": "chkconfig ufw on"
              },
              "09_change_port_ssh": {
                "command": "sudo sed -i \"s/#Port 22/Port 2223/\" /etc/ssh/sshd_config"
              },
              "10_sshd_restart": {
                "command": "sudo service sshd restart"
              }
            }
          },
          "upload_files": {
            "commands": {
              "01_upload_files_zipfiles": {
                "cwd": "/opt/easy-rsa/keys",
                "command": "zip Workmates.zip ca.crt statictlssecret.key clientuser.key clientuser.crt openvpn_clientuser.ovpn"
              },
              "02_upload_files_s3cp_openVPNClientFiles": {
                "cwd": "/opt/easy-rsa/keys",
                "command": {
                  "Fn::Sub": "aws s3 cp Workmates.zip s3://${myS3Bucket}/client/Workmates.zip\n"
                }
              },
              "03_upload_files_s3cp_cfn_init_log": {
                "cwd": "/var/log",
                "test": "test -e /var/log/cfn-init.log",
                "command": {
                  "Fn::Sub": "aws s3 cp /var/log/cfn-init.log s3://${myS3Bucket}/log/genSecrets_cfn-init.log\n"
                }
              }
            }
          },
          "clear_files": {
            "commands": {
              "01_clean_certificate": {
                "command": "sudo rm -rf /tmp/certificate*"
              },
              "02_clean_upload_user": {
                "command": "sudo rm -rf /tmp/upload.sh /tmp/user.sh /tmp/revoke-2.sh"
              }
            }
          }
        }
      }
    }
  },
  "Outputs": {
    "myS3BucketOut": {
      "Description": "S3 bucket name",
      "Value": {
        "Fn::Sub": "https://s3.console.aws.amazon.com/s3/buckets/${myS3Bucket}?region=${AWS::Region}&tab=objects"
      }
    },
    "myEIPOut": {
      "Description": "Instance EIP",
      "Value": {
        "Ref": "myEIP"
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "OpenVPN Configuration"
          },
          "Parameters": [
            "Country",
            "Province",
            "City",
            "Organization",
            "Email",
            "OrganizationUnit",
            "ClientIPCIDR"
          ]
        },
        {
          "Label": {
            "default": "EC2 Configuration"
          },
          "Parameters": [
            "ClientName",
            "VPC",
            "Subnets",
            "SSHKeyName"
          ]
        }
      ],
      "ParameterLabels": {
        "ClientName": {
          "default": "Client Name"
        },
        "OrganizationUnit": {
          "default": "Organization Unit"
        },
        "SSHKeyName": {
          "default": "Existing Key Pair"
        },
        "ClientIPCIDR": {
          "default": "Provide CIDR"
        }
      }
    }
  }
}
